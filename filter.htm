<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
</head>
<body>
    <p>
        <input type="button" onclick="FilterSample.toggle();" value="Play/Pause">
        Filter on:
        <input type="checkbox" checked="false" oninput="FilterSample.toggleFilter(this);">
        Frequency:
        <input type="range" min="0" max="1" step="0.01" value="1" oninput="FilterSample.changeFrequency(this);">
        Quality:
        <input type="range" min="0" max="1" step="0.01" value="0" oninput="FilterSample.changeQuality(this);"></p>
        <script src="buffer-loader.js" type="text/javascript"></script>
<script>
    // Keep track of all loaded buffers.
    var BUFFERS = {};
    // Page-wide audio context.
    var context = null;

    // An object to track the buffers to load {name: path}
    var BUFFERS_TO_LOAD = {
        kick: 'demo.mp3'
    };

    // Loads all sound samples into the buffers object.
    function loadBuffers() {
        // Array-ify
        var names = [];
        var paths = [];
        for (var name in BUFFERS_TO_LOAD) {
            var path = BUFFERS_TO_LOAD[name];
            names.push(name);
            paths.push(path);
        }
        bufferLoader = new BufferLoader(context, paths, function (bufferList) {
            for (var i = 0; i < bufferList.length; i++) {
                var buffer = bufferList[i];
                var name = names[i];
                BUFFERS[name] = buffer;
            }
        });
        bufferLoader.load();
    }

    document.addEventListener('DOMContentLoaded', function () {
        try {
            // Fix up prefixing
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            context = new AudioContext();
        }
        catch (e) {
            alert("Web Audio API is not supported in this browser");
        }
        loadBuffers();
    });

</script>
<script>
    var FilterSample = {
        FREQ_MUL: 7000,
        QUAL_MUL: 30,
        playing: false
    };

    FilterSample.play = function () {
        // Create the source.
        var source = context.createBufferSource();
        source.buffer = BUFFERS.kick;
        // Create the filter.
        var filter = context.createBiquadFilter();
        //filter.type is defined as string type in the latest API. But this is defined as number type in old API.
        filter.type = (typeof filter.type === 'string') ? 'lowpass' : 0; // LOWPASS
        filter.frequency.value = 5000;
        // Connect source to filter, filter to destination.
        source.connect(filter);
        filter.connect(context.destination);
        // Play!
        if (!source.start)
            source.start = source.noteOn;
        source.start(0);
        source.loop = true;
        // Save source and filterNode for later access.
        this.source = source;
        this.filter = filter;
    };

    FilterSample.stop = function () {
        if (!this.source.stop)
            this.source.stop = source.noteOff;
        this.source.stop(0);
        this.source.noteOff(0);
    };

    FilterSample.toggle = function () {
        this.playing ? this.stop() : this.play();
        this.playing = !this.playing;
    };

    FilterSample.changeFrequency = function (element) {
        // Clamp the frequency between the minimum value (40 Hz) and half of the
        // sampling rate.
        var minValue = 40;
        var maxValue = context.sampleRate / 2;
        // Logarithm (base 2) to compute how many octaves fall in the range.
        var numberOfOctaves = Math.log(maxValue / minValue) / Math.LN2;
        // Compute a multiplier from 0 to 1 based on an exponential scale.
        var multiplier = Math.pow(2, numberOfOctaves * (element.value - 1.0));
        // Get back to the frequency value between min and max.
        this.filter.frequency.value = maxValue * multiplier;
        console.log("f=" + maxValue * multiplier);
    };

    FilterSample.changeQuality = function (element) {
        this.filter.Q.value = element.value * this.QUAL_MUL;
        console.log("q=" + element.value * this.QUAL_MUL);
    };

    FilterSample.toggleFilter = function (element) {
        this.source.disconnect(0);
        this.filter.disconnect(0);
        // Check if we want to enable the filter.
        if (element.checked) {
            // Connect through the filter.
            this.source.connect(this.filter);
            this.filter.connect(context.destination);
        } else {
            // Otherwise, connect directly.
            this.source.connect(context.destination);
        }
    };
</script>
</body>
</html>
